/**
 * This class is generated by jOOQ
 */
package dataaccess.database.tables;


import dataaccess.database.Keys;
import dataaccess.database.Public;
import dataaccess.database.tables.records.NodeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Node extends TableImpl<NodeRecord> {

	private static final long serialVersionUID = -397786075;

	/**
	 * The reference instance of <code>public.Node</code>
	 */
	public static final Node NODE = new Node();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<NodeRecord> getRecordType() {
		return NodeRecord.class;
	}

	/**
	 * The column <code>public.Node.Id</code>.
	 */
	public final TableField<NodeRecord, String> ID = createField("Id", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "\n");

	/**
	 * The column <code>public.Node.NetworkId</code>.
	 */
	public final TableField<NodeRecord, Integer> NETWORKID = createField("NetworkId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.Node.QuadKey</code>.
	 */
	public final TableField<NodeRecord, String> QUADKEY = createField("QuadKey", org.jooq.impl.SQLDataType.VARCHAR.length(18), this, "\n");

	/**
	 * The column <code>public.Node.x</code>.
	 */
	public final TableField<NodeRecord, String> X = createField("x", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

	/**
	 * The column <code>public.Node.y</code>.
	 */
	public final TableField<NodeRecord, String> Y = createField("y", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

	/**
	 * Create a <code>public.Node</code> table reference
	 */
	public Node() {
		this("Node", null);
	}

	/**
	 * Create an aliased <code>public.Node</code> table reference
	 */
	public Node(String alias) {
		this(alias, NODE);
	}

	private Node(String alias, Table<NodeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Node(String alias, Table<NodeRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<NodeRecord> getPrimaryKey() {
		return Keys.NODEID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<NodeRecord>> getKeys() {
		return Arrays.<UniqueKey<NodeRecord>>asList(Keys.NODEID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<NodeRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<NodeRecord, ?>>asList(Keys.NODE__NETWORKID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Node as(String alias) {
		return new Node(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Node rename(String name) {
		return new Node(name, null);
	}
}
