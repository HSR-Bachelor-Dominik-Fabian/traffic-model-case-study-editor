/**
 * This class is generated by jOOQ
 */
package dataaccess.database.tables;


import dataaccess.database.Keys;
import dataaccess.database.Public;
import dataaccess.database.tables.records.NodeRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.7.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Node extends TableImpl<NodeRecord> {

    private static final long serialVersionUID = -1380764626;

    /**
     * The reference instance of <code>public.Node</code>
     */
    public static final Node NODE = new Node();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeRecord> getRecordType() {
        return NodeRecord.class;
    }

    /**
     * The column <code>public.Node.Id</code>.
     */
    public final TableField<NodeRecord, String> ID = createField("Id", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "\r\n");

    /**
     * The column <code>public.Node.NetworkId</code>.
     */
    public final TableField<NodeRecord, Integer> NETWORKID = createField("NetworkId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Node.QuadKey</code>.
     */
    public final TableField<NodeRecord, String> QUADKEY = createField("QuadKey", org.jooq.impl.SQLDataType.VARCHAR.length(18), this, "\r\n");

    /**
     * The column <code>public.Node.X</code>.
     */
    public final TableField<NodeRecord, BigDecimal> X = createField("X", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.Node.Y</code>.
     */
    public final TableField<NodeRecord, BigDecimal> Y = createField("Y", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.Node.Lat</code>.
     */
    public final TableField<NodeRecord, BigDecimal> LAT = createField("Lat", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.Node.Long</code>.
     */
    public final TableField<NodeRecord, BigDecimal> LONG = createField("Long", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * Create a <code>public.Node</code> table reference
     */
    public Node() {
        this("Node", null);
    }

    /**
     * Create an aliased <code>public.Node</code> table reference
     */
    public Node(String alias) {
        this(alias, NODE);
    }

    private Node(String alias, Table<NodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Node(String alias, Table<NodeRecord> aliased, Field<?>[] parameters) {
        super(alias, Public.PUBLIC, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NodeRecord> getPrimaryKey() {
        return Keys.NODEID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NodeRecord>> getKeys() {
        return Arrays.<UniqueKey<NodeRecord>>asList(Keys.NODEID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NodeRecord, ?>>asList(Keys.NODE__NETWORKID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Node as(String alias) {
        return new Node(alias, this);
    }

    /**
     * Rename this table
     */
    public Node rename(String name) {
        return new Node(name, null);
    }
}
